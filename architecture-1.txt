Instruction Set Architecture - Chapter 1

* Architecture: Von Neumann
* Memory Address space: 65536 bytes (0x0000 - 0xFFFF)
* Register size: 16 bits
* Number of registers: 8 (r0-r7)
* Endianness: BIG

Instructions
============

Read/Write Memory
-----------------

* LOAD rX, imm value
    [PC]      [PC+1]    [PC+2]
    0000 0XXX AAAA AAAA BBBB BBBB

    Register(XXX) = AAAAAAAABBBBBBBB
    PC += 3

* LOAD rX, [imm addr]
    [PC]      [PC+1]    [PC+2]
    0000 1XXX AAAA AAAA BBBB BBBB

    Register(XXX) = *(AAAAAAAABBBBBBBB)
    PC += 3

* LOAD rX, rY
    [PC]      [PC+1]
    0001 0XXX YYY0 0000

    Register(XXX) = Register(YYY)
    PC += 2

* LOAD rX, [rY+/-Z] (-16 <= Z <= 15) 
    [PC]      [PC+1]
    0001 1XXX YYYZ ZZZZ

    Register(XXX) = *(Register(YYY) + ZZZZZ)
    PC += 2

* STORE rX, [imm addr]
    [PC]      [PC+1]    [PC+2]
    0010 0XXX AAAA AAAA BBBB BBBB

    *(AAAAAAAABBBBBBBB) = Register(XXX)
    PC += 3

* STORE rX, [rY+/-Z] (-16 <= Z <= 15) 
    [PC]      [PC+1]
    0010 1XXX YYYZ ZZZZ

    *(Register(YYY) + ZZZZZ) = Register(XXX)
    PC += 2

Arithmetics
-----------

* ADD rX, rY
    [PC]      [PC+1]
    0100 0XXX YYY0 0000

    Register(XXX) += Register(YYY)
    PC += 2

* SUB rX, rY
    [PC]      [PC+1]
    0100 1XXX YYY0 0000

    Register(XXX) -= Register(YYY)
    PC += 2

* MUL rX, rY
    [PC]      [PC+1]
    0101 0XXX YYY0 0000

    Register(XXX) *= Register(YYY)
    PC += 2

* DIV rX, rY
    [PC]      [PC+1]
    0101 1XXX YYY0 0000

    Register(XXX) = Register(XXX) / Register(YYY)
    Register(YYY) = Register(XXX) % Register(YYY)
    PC += 2

* AND rX, rY
    [PC]      [PC+1]
    0110 0XXX YYY0 0000

    Register(XXX) &= Register(YYY)
    PC += 2

* OR  rX, rY
    [PC]      [PC+1]
    0110 1XXX YYY0 0000

    Register(XXX) |= Register(YYY)
    PC += 2

* XOR rX, rY
    [PC]      [PC+1]
    0111 0XXX YYY0 0000

    Register(XXX) ^= Register(YYY)
    PC += 2

Control
-------

* CMP rX, rY  (2 bytes)
    [PC]      [PC+1]
    1000 0XXX YYY0 0000
    
    PC += 2

    Note: Compares Register(XXX) & Register(YYY), set internal state for conditional opcodes
    (rX == rY) => EQ
    (rX != rY) => NE
    (rX <= rY) => LE
    (rX < rY)  => LT
    (rX >= rY) => GE
    (rX > rY)  => GT

* JMP.COND [imm addr]
    [PC]      [PC+1]    [PC+2]
    1001 0CCC AAAA AAAA BBBB BBBB

    CCC == 000 => ALWAYS
    CCC == 001 => EQ
    CCC == 010 => NE
    CCC == 011 => LE 
    CCC == 100 => LT 
    CCC == 101 => GE 
    CCC == 110 => GT
    
    If the conditon is met:
        PC = (AAAAAAAABBBBBBBB)
    else
        PC += 3

* BREAK  (1 byte)
    [PC]
    1111 1000

    Halts CPU
